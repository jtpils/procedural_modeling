steps = 12                  #timestep: 3 steps/year, unit of age is year)
step_tracker = 0
germination_offset = 10     #number of initial derivation to account for germination before visual growth of internode starts (i.e., before time t starts)
diameter_growth_rate = 0.1  #m/year? relative growth rate?
annual_no_new_nodes = 30.0  #number of new buds per year
avg_internode_length = 0.03 #unit: m
partial_node_per_step = (float)(annual_no_new_nodes%steps)/steps
no_new_nodes_per_step = int(annual_no_new_nodes // steps)  #integer
branchFlag = True

print 'Derivation length:',
print germination_offset+age*steps

derivation length: germination_offset + age*steps

module O    #seed
module S    #shoot
module R    #root
module B    #bud
module N    #node
module I    #internode
module L    #leaf
module W    #flower
module U    #fruit

Axiom: O

def EndEach(lstring):
    print lstring

production:

O:        #seed
  global germination_offset
  germination_offset = germination_offset - 1
  if germination_offset is 2:
    produce RS

R:        #root
  pass

S:      #shoot
  global germination_offset
  germination_offset = germination_offset - 1
  #print 'Debug in S:',
  #print germination_offset
  if germination_offset is 1:
    produce B(germination_offset)

B(status):      #bud
  if status is 1:     #bud grows a node & internode
    produce NI(0.0,0.0)B(0)
    #todo: when will the bud form the next node??? i.e., B(1)
  elif status < 0:   #bud grows into a flower
    produce W
                      #status is 0: bud is dormant

N:      #node
  global branchFlag
  if branchFlag is True:
    branchFlag = False
    produce NL[B(0)]
    #todo: when will the lateral bud [B] grow?
  #else:
  #  branchFlag = True


I(length, radius) > B(status):
  length_norm = 0.0
  if (length < avg_internode_length):
    length_norm = length / avg_internode_length   #float
  #print 'length_norm = ',
  #print length_norm

  aggregate_partial_node_per_step = partial_node_per_step + length_norm
  eff_new_nodes = no_new_nodes_per_step

  if aggregate_partial_node_per_step >= 1:
    eff_new_nodes =  eff_new_nodes + 1
    aggregate_partial_node_per_step = aggregate_partial_node_per_step - 1

  #print 'aggregate_partial_node_per_step = ',
  #print aggregate_partial_node_per_step

  diameter_growth_per_node = diameter_growth_rate/annual_no_new_nodes
  cur_radius = radius+diameter_growth_rate/steps
  near_bud_radius = diameter_growth_rate/steps*aggregate_partial_node_per_step
  #print 'near_bud_radius=',
  #print near_bud_radius
  if eff_new_nodes>=1:
    for i in range(eff_new_nodes):
      nproduce I(avg_internode_length, cur_radius)N
      cur_radius = cur_radius - diameter_growth_per_node
  produce I(avg_internode_length*aggregate_partial_node_per_step, near_bud_radius)

I(length, radius) > N:
  produce I(length, radius+diameter_growth_rate/steps)


L:      #leaf
    produce *
    #fallen

W:      #flower
    produce *
    #wither

U:      #fruit
    produce *
    #fallen


homomorphism:

I(length, radius) --> F(length, radius)

endlsystem
